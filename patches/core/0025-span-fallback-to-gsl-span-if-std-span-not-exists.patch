From 2cab7f70515a8fa3ca488c937e5540e02661835d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C4=90o=C3=A0n=20Tr=E1=BA=A7n=20C=C3=B4ng=20Danh?=
 <congdanhqx@gmail.com>
Date: Sun, 1 Nov 2020 13:01:48 +0700
Subject: [PATCH] span: fallback to gsl::span if std::span not exists

---
 adb/client/file_sync_client.cpp  |  4 +--
 adb/compression_utils.h          | 46 +++++++++++++++++++++-----------
 adb/daemon/file_sync_service.cpp |  4 +--
 3 files changed, 34 insertions(+), 20 deletions(-)

diff --git a/adb/client/file_sync_client.cpp b/adb/client/file_sync_client.cpp
index 8bbe2a878..f626e73a7 100644
--- a/adb/client/file_sync_client.cpp
+++ b/adb/client/file_sync_client.cpp
@@ -1155,7 +1155,7 @@ static bool sync_recv_v2(SyncConnection& sc, const char* rpath, const char* lpat
             decoder_storage;
     Decoder* decoder = nullptr;
 
-    std::span buffer_span(buffer.data(), buffer.size());
+    aosp::span<std::iterator_traits<Block::iterator>::value_type> buffer_span(buffer.data(), buffer.size());
     switch (compression) {
         case CompressionType::None:
             decoder = &decoder_storage.emplace<NullDecoder>(buffer_span);
@@ -1209,7 +1209,7 @@ static bool sync_recv_v2(SyncConnection& sc, const char* rpath, const char* lpat
         }
 
         while (true) {
-            std::span<char> output;
+            aosp::span<char> output;
             DecodeResult result = decoder->Decode(&output);
 
             if (result == DecodeResult::Error) {
diff --git a/adb/compression_utils.h b/adb/compression_utils.h
index a74710823..8f0772645 100644
--- a/adb/compression_utils.h
+++ b/adb/compression_utils.h
@@ -18,7 +18,6 @@
 
 #include <algorithm>
 #include <memory>
-#include <span>
 
 #include <android-base/logging.h>
 
@@ -27,6 +26,21 @@
 #include <lz4frame.h>
 #include <zstd.h>
 
+#if __has_include(<span>)
+#include <span>
+
+namespace aosp {
+	template <typename T> using span = std::span<T>;
+}
+
+#else
+#include <gsl/span>
+
+namespace aosp {
+	template <typename T> using span = gsl::span<T>;
+}
+#endif
+
 #include "types.h"
 
 enum class DecodeResult {
@@ -54,15 +68,15 @@ struct Decoder {
         return true;
     }
 
-    virtual DecodeResult Decode(std::span<char>* output) = 0;
+    virtual DecodeResult Decode(aosp::span<char>* output) = 0;
 
   protected:
-    Decoder(std::span<char> output_buffer) : output_buffer_(output_buffer) {}
+    Decoder(aosp::span<char> output_buffer) : output_buffer_(output_buffer) {}
     ~Decoder() = default;
 
     bool finished_ = false;
     IOVector input_buffer_;
-    std::span<char> output_buffer_;
+    aosp::span<char> output_buffer_;
 };
 
 struct Encoder {
@@ -88,9 +102,9 @@ struct Encoder {
 };
 
 struct NullDecoder final : public Decoder {
-    explicit NullDecoder(std::span<char> output_buffer) : Decoder(output_buffer) {}
+    explicit NullDecoder(aosp::span<char> output_buffer) : Decoder(output_buffer) {}
 
-    DecodeResult Decode(std::span<char>* output) final {
+    DecodeResult Decode(aosp::span<char>* output) final {
         size_t available_out = output_buffer_.size();
         void* p = output_buffer_.data();
         while (available_out > 0 && !input_buffer_.empty()) {
@@ -99,7 +113,7 @@ struct NullDecoder final : public Decoder {
             available_out -= len;
             input_buffer_.drop_front(len);
         }
-        *output = std::span(output_buffer_.data(), static_cast<char*>(p));
+        *output = aosp::span<char>(output_buffer_.data(), static_cast<char*>(p));
         if (input_buffer_.empty()) {
             return finished_ ? DecodeResult::Done : DecodeResult::NeedInput;
         }
@@ -134,12 +148,12 @@ struct NullEncoder final : public Encoder {
 };
 
 struct BrotliDecoder final : public Decoder {
-    explicit BrotliDecoder(std::span<char> output_buffer)
+    explicit BrotliDecoder(aosp::span<char> output_buffer)
         : Decoder(output_buffer),
           decoder_(BrotliDecoderCreateInstance(nullptr, nullptr, nullptr),
                    BrotliDecoderDestroyInstance) {}
 
-    DecodeResult Decode(std::span<char>* output) final {
+    DecodeResult Decode(aosp::span<char>* output) final {
         size_t available_in = input_buffer_.front_size();
         const uint8_t* next_in = reinterpret_cast<const uint8_t*>(input_buffer_.front_data());
 
@@ -153,7 +167,7 @@ struct BrotliDecoder final : public Decoder {
         input_buffer_.drop_front(bytes_consumed);
 
         size_t bytes_emitted = output_buffer_.size() - available_out;
-        *output = std::span<char>(output_buffer_.data(), bytes_emitted);
+        *output = aosp::span<char>(output_buffer_.data(), bytes_emitted);
 
         switch (r) {
             case BROTLI_DECODER_RESULT_SUCCESS:
@@ -233,7 +247,7 @@ struct BrotliEncoder final : public Encoder {
 };
 
 struct LZ4Decoder final : public Decoder {
-    explicit LZ4Decoder(std::span<char> output_buffer)
+    explicit LZ4Decoder(aosp::span<char> output_buffer)
         : Decoder(output_buffer), decoder_(nullptr, nullptr) {
         LZ4F_dctx* dctx;
         if (LZ4F_createDecompressionContext(&dctx, LZ4F_VERSION) != 0) {
@@ -243,7 +257,7 @@ struct LZ4Decoder final : public Decoder {
                 dctx, LZ4F_freeDecompressionContext);
     }
 
-    DecodeResult Decode(std::span<char>* output) final {
+    DecodeResult Decode(aosp::span<char>* output) final {
         size_t available_in = input_buffer_.front_size();
         const char* next_in = input_buffer_.front_data();
 
@@ -267,7 +281,7 @@ struct LZ4Decoder final : public Decoder {
             lz4_done_ = true;
         }
 
-        *output = std::span<char>(output_buffer_.data(), available_out);
+        *output = aosp::span<char>(output_buffer_.data(), available_out);
 
         if (finished_) {
             return input_buffer_.empty() && lz4_done_ ? DecodeResult::Done
@@ -384,14 +398,14 @@ struct LZ4Encoder final : public Encoder {
 };
 
 struct ZstdDecoder final : public Decoder {
-    explicit ZstdDecoder(std::span<char> output_buffer)
+    explicit ZstdDecoder(aosp::span<char> output_buffer)
         : Decoder(output_buffer), decoder_(ZSTD_createDStream(), ZSTD_freeDStream) {
         if (!decoder_) {
             LOG(FATAL) << "failed to initialize Zstd decompression context";
         }
     }
 
-    DecodeResult Decode(std::span<char>* output) final {
+    DecodeResult Decode(aosp::span<char>* output) final {
         ZSTD_inBuffer in;
         in.src = input_buffer_.front_data();
         in.size = input_buffer_.front_size();
@@ -419,7 +433,7 @@ struct ZstdDecoder final : public Decoder {
             zstd_done_ = true;
         }
 
-        *output = std::span<char>(output_buffer_.data(), out.pos);
+        *output = aosp::span<char>(output_buffer_.data(), out.pos);
 
         if (finished_) {
             return input_buffer_.empty() && zstd_done_ ? DecodeResult::Done
diff --git a/adb/daemon/file_sync_service.cpp b/adb/daemon/file_sync_service.cpp
index 513b8dd8f..2bef5df1b 100644
--- a/adb/daemon/file_sync_service.cpp
+++ b/adb/daemon/file_sync_service.cpp
@@ -271,7 +271,7 @@ static bool handle_send_file_data(borrowed_fd s, unique_fd fd, uint32_t* timesta
                                   CompressionType compression) {
     syncmsg msg;
     Block buffer(SYNC_DATA_MAX);
-    std::span<char> buffer_span(buffer.data(), buffer.size());
+    aosp::span<char> buffer_span(buffer.data(), buffer.size());
     std::variant<std::monostate, NullDecoder, BrotliDecoder, LZ4Decoder, ZstdDecoder>
             decoder_storage;
     Decoder* decoder = nullptr;
@@ -313,7 +313,7 @@ static bool handle_send_file_data(borrowed_fd s, unique_fd fd, uint32_t* timesta
         }
 
         while (true) {
-            std::span<char> output;
+            aosp::span<char> output;
             DecodeResult result = decoder->Decode(&output);
             if (result == DecodeResult::Error) {
                 SendSyncFailErrno(s, "decompress failed");
